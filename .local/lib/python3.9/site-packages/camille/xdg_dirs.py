import unittest
from pathlib import Path, PosixPath
from typing import Optional
from xdg import BaseDirectory

"""Retrieve current XDG user directories.

Require the pyxdg library."""

__default_xdg_dirs = {
    "DESKTOP": Path.home() / "Desktop",
    "DOCUMENTS": Path.home() / "Documents",
    "DOWNLOAD": Path.home() / "Downloads",
    "MUSIC": Path.home() / "Music",
    "PICTURES": Path.home() / "Pictures",
    "PUBLICSHARE": Path.home() / "Public",
    "TEMPLATES": Path.home() / "Templates",
    "VIDEOS": Path.home() / "Videos"
}


def __parse_user_dirs_line(line: str) -> Optional[PosixPath]:
    """Parse one user-dirs.dirs line, returning the path or None in case of
    bad format."""
    name, raw_attribute = line.split('=')
    attribute = raw_attribute.rstrip().strip('"')

    if attribute.startswith('$HOME/'):
        return Path.home() / attribute.removeprefix('$HOME/')

    if attribute.startswith('/'):
        return PosixPath(attribute)

    return None


def __search_user_dirs(xdg_name: str) -> Optional[PosixPath]:
    """Parse user-dirs.dirs, returning the path of the given xdg_name.
    None is returned if no variable was found."""
    config_path = PosixPath(BaseDirectory.xdg_config_home, "user-dirs.dirs")

    with config_path.open('r') as f:
        for line in f:
            if line.startswith(f'XDG_{xdg_name}_DIR='):
                xdg_path = __parse_user_dirs_line(line)
                return xdg_path

    return None


def __get_dir(xdg_name: str) -> Optional[PosixPath]:
    """Given the xdg_name, get directory from user-dirs.dirs, or the default
    ones."""
    xdg_path = __search_user_dirs(xdg_name)
    if xdg_path:
        return xdg_path

    if xdg_name in __default_xdg_dirs:
        xdg_path = __default_xdg_dirs[xdg_name]
        return xdg_path

    return None


def get_desktop_dir() -> Optional[PosixPath]:
    return __get_dir("DESKTOP")


def get_documents_dir() -> Optional[PosixPath]:
    return __get_dir("DOCUMENTS")


def get_download_dir() -> Optional[PosixPath]:
    return __get_dir("DOWNLOAD")


def get_music_dir() -> Optional[PosixPath]:
    return __get_dir("MUSIC")


def get_pictures_dir() -> Optional[PosixPath]:
    return __get_dir("PICTURES")


def get_publicshare_dir() -> Optional[PosixPath]:
    return __get_dir("PUBLICSHARE")


def get_templates_dir() -> Optional[PosixPath]:
    return __get_dir("TEMPLATES")


def get_videos_dir() -> Optional[PosixPath]:
    return __get_dir("VIDEOS")


class TestXDGDirs(unittest.TestCase):
    def test_defaults(self):
        dirs = globals()["__default_xdg_dirs"]
        tests = {
            dirs['DESKTOP']: Path('/home/fedora/Desktop'),
            dirs['DOCUMENTS']: Path('/home/fedora/Documents'),
            dirs['DOWNLOAD']: Path('/home/fedora/Downloads'),
            dirs['MUSIC']: Path('/home/fedora/Music'),
            dirs['PICTURES']: Path('/home/fedora/Pictures'),
            dirs['PUBLICSHARE']: Path('/home/fedora/Public'),
            dirs['TEMPLATES']: Path('/home/fedora/Templates'),
            dirs['VIDEOS']: Path('/home/fedora/Videos')
        }
        for original in tests:
            self.assertEqual(original, tests[original])

    def test_parse_user_dirs_line(self):
        parse_line = globals()["__parse_user_dirs_line"]
        tests = {
            """XDG_LOL_DIR="$HOME/xxx"
""": Path.home() / "xxx",
            """XDG_LOL_DIR="/xxx/yyy"
""": Path("/xxx/yyy"),
            'XDG_LOL_DIR="$HOME/xxx"': Path.home() / "xxx",
            'XDG_LOL_DIR="/yyy"': Path("/yyy"),
            'XDG_DESKTOP_DIR="$HOME/Desktop"': Path.home() / "Desktop",
            'XDG_DOCUMENTS_DIR="$HOME/Documents"': Path.home() / "Documents",
            'XDG_DOWNLOAD_DIR="$HOME/Downloads"': Path.home() / "Downloads",
            'XDG_MUSIC_DIR="$HOME/Music"': Path.home() / "Music",
            'XDG_PICTURES_DIR="$HOME/Pictures"': Path.home() / "Pictures",
            'XDG_PUBLICSHARE_DIR="$HOME/Public"': Path.home() / "Public",
            'XDG_TEMPLATES_DIR="$HOME/Templates"': Path.home() / "Templates",
            'XDG_VIDEOS_DIR="$HOME/Videos"': Path.home() / "Videos"
        }
        for argument in tests:
            self.assertEqual(parse_line(argument), tests[argument])

    def test_search_user_dirs(self):
        search = globals()["__search_user_dirs"]
        tests = (
            'DESKTOP',
            'DOCUMENTS',
            'DOWNLOAD',
            'MUSIC',
            'PICTURES',
            'PUBLICSHARE',
            'TEMPLATES',
            'VIDEOS'
        )
        for argument in tests:
            self.assertTrue(search(argument).is_dir())

    def test_exists(self):
        self.assertTrue(get_desktop_dir().is_dir())
        self.assertTrue(get_documents_dir().is_dir())
        self.assertTrue(get_download_dir().is_dir())
        self.assertTrue(get_music_dir().is_dir())
        self.assertTrue(get_pictures_dir().is_dir())
        self.assertTrue(get_publicshare_dir().is_dir())
        self.assertTrue(get_templates_dir().is_dir())
        self.assertTrue(get_videos_dir().is_dir())


if __name__ == '__main__':
    unittest.main()
