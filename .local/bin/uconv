#!/usr/bin/env python3

"""Transcode all the video files from a directory, and keep the smallest.

The transcoding should:
    - produce video files which are much smaller
    - with an acceptable quality for cheap laptop
    - should not take too long on a cheap laptop
Thus using VAAPI or other hardware encoding acceleration should be a priority.
"""

import argparse
import os
import re
import sys
import subprocess
from loguru import logger
from pathlib import Path
from typing import List


# Make this script less verbose
logger.remove()
logger.add(sys.stderr, level="WARNING")


def find_videos(directory: Path, extension: str) -> List:
    """Find all the files with the given extension in the directory.

    Return a list of the files."""
    videos: List = list()
    match = None

    if not directory.is_dir():
        logger.critical(f'"{directory}" must be an existing directory')
        sys.exit(1)

    normalized_extension = extension.casefold()
    match = re.match(r"\..*", normalized_extension)
    if match is None:
        logger.critical(f'wrong format given: "{extension}" instead of ' + '".xxx"')
        sys.exit(1)

    logger.debug(f"finding videos from {directory}")
    for root, directories, files in os.walk(directory):
        for f in files:
            suffix = Path(f).suffix.casefold()
            if suffix == normalized_extension:
                absolute_path = Path(root, f).resolve()
                videos.append(absolute_path)

    return videos


def transcode(video: Path) -> None:
    """Transcode the given video."""
    transcoded = video.with_suffix(".mkv")

    if transcoded.exists():
        logger.debug(f'"{transcoded}" already exists, skipping')
        return

    logger.debug(f'transcode to "{transcoded}"')
    try:
        subprocess.run(
            [
                "ffmpeg",
                "-benchmark",
                "-hide_banner",
                "-loglevel",
                "panic",
                "-nostdin",
                "-y",
                "-xerror",
                "-hwaccel",
                "vaapi",
                "-hwaccel_device",
                "/dev/dri/renderD128",
                "-i",
                video,
                "-vf",
                "yadif",
                "-c:v",
                "libx265",
                "-crf",
                "28",
                "-c:a",
                "libopus",
                transcoded,
            ]
        )
    except subprocess.CalledProcessError:
        logger.warning(f'couldn\'t convert to "{transcoded}"')
        os.remove(f"{transcoded}")
    except KeyboardInterrupt:
        os.remove(f"{transcoded}")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Convert all the video " + "files from a directory"
    )
    parser.add_argument("directory", help="where the videos are stored")
    parser.add_argument(
        "extension",
        help="video files extensions to " + 'convert (eg. ".MOV" or ".avi")',
    )
    arguments = parser.parse_args()

    directory = Path(arguments.directory)
    videos = find_videos(directory, arguments.extension)

    for video in videos:
        transcode(video)
