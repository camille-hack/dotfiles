#!/usr/bin/env python3

"""Download my audio files from youtube etc inside the user music folder.

This file should do a bit of magic regarding where to download stuff."""

# TODO: write the file metadata
# TODO: write a playlist

import argparse
import csv
import os
import pathlib
import youtube_dl
import user_xdg_dirs


class RemoteAudio:
    """Remote audio file, that can be downloaded with youtube_dl. The local
    file lives in xdg MUSIC directory."""
    __music_directory = user_xdg_dirs.get_music_dir()

    metadata = {"artist": None,
                "album": None,
                "title": None}

    def __init__(self, name, url, folder):
        """Configure remote audio information, to download from the url into
        its relative folder with given name.

        name: name of the file
        url: url to download with youtube_dl
        folder: directory relative to MUSIC xdg directory"""
        self.name = name
        self.url = url
        self.directory = pathlib.Path(self.__music_directory, folder)

    def download(self):
        """Download the audio file."""

        # Skip if the file is already here
        matches = self.directory.glob(self.name + ".*")
        for match in matches:
            print('skipping download: "' + match.as_posix() + '" exists')
            return

        # Download with youtube-dl
        print("downloading %s…" % self.name)
        options = {
            'quiet': True,
            'format': 'bestaudio/best',
            'outtmpl': pathlib.Path(self.directory, self.name +
                                    '.%(ext)s').as_posix(),
            'ignoreerrors': True,
            'postprocessors': ({'key': 'FFmpegExtractAudio'}, )
        }
        with youtube_dl.YoutubeDL(options) as ydl:
            ydl.download((self.url, ))

#       TODO Write metadata
#       file_metadata = mutagen.File(pathlib.Path(self.directory, self.name, +
#                                    self.extension, easy=True)
#       file_metadata["title"] = self.metadata["title"]
#       file_metadata["artist"] self.metadata["artist"]
#       file_metadata["album"] = self.metadata["album"]
#       file_metadata.save()

    def delete_local_file(self):
        """Delete the audio file.

        Beware, because the extension is not known, therefore all files with
        similar names will be removed."""
        path = pathlib.Path(self.directory)
        matches = path.glob(self.name + ".*")
        for match in matches:
            print
            ("removing %s…" % match.as_posix())
            os.remove(match.as_posix())


class RemoteAlbum(RemoteAudio):
    """Remote audio album. Lives in a "albums" folder."""
    def __init__(self, artist, album, url):
        self.metadata["artist"] = artist
        self.metadata["album"] = album

        super().__init__(artist, url, os.path.join("albums", artist, album))


class RemoteSong(RemoteAudio):
    """Remote audio song. Lives in a "songs" folder."""
    def __init__(self, artist, title, url, album=None):
        self.metadata["artist"] = artist
        self.metadata["title"] = title
        if album:
            self.metadata["album"] = album

        super().__init__(artist + " - " + title, url, "songs")


class RemoteSound(RemoteAudio):
    """Remote sound. Lives in a "sounds" folder."""
    def __init__(self, name, url):
        super().__init__(name, url, "sounds")


def parse_list():
    music_directory = user_xdg_dirs.get_music_dir()

    with open(os.path.join(music_directory, "urls.csv")) as csv_file:
        reader = csv.reader(csv_file)
        for row in reader:
            if row[0] == "album":
                audio = RemoteAlbum(row[1], row[2], row[3])
            elif row[0] == "song":
                audio = RemoteSong(row[1], row[2], row[3])
            elif row[0] == "sound":
                audio = RemoteSound(row[1], row[2])
            yield audio


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="fill up the music folder " +
                                                 "with good vibes")
    parser.add_argument("command", choices=["delete", "download"],
                        help="delete or download music")
    arguments = parser.parse_args()

    if arguments.command == "download":
        download_directories = set()
        for audio in parse_list():
            download_directories.add(audio.directory)
        for directory in download_directories:
            print('creating directory "%s"…' % directory.as_posix())
            os.makedirs(directory.as_posix(), exist_ok=True)
        for audio in parse_list():
            audio.download()

    elif arguments.command == "delete":
        download_directories = set()
        for audio in parse_list():
            audio.delete_local_file()
            download_directories.add(audio.directory)
        for directory in download_directories:
            print('removing directory "%s"…' % directory.as_posix())
            os.rmdir(directory.as_posix())
